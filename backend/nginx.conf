worker_processes  1;

env SOCKEXEC_SOCKET;

events {
    worker_connections  1024;
}

env DB_HOST;

http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;

  keepalive_timeout  65;

  lua_package_path "/usr/local/openresty/site/lualib/bingo/?.lua;/usr/local/openresty/nginx/lua/?.lua;;";

  init_worker_by_lua_block {
    local uuid = require 'resty.jit-uuid'
    uuid.seed()
  }

  init_by_lua_block {
    require "resty.core"
    collectgarbage("collect")  -- just to collect any garbage
    encodeJSON = require('cjson.safe').encode
  }

  resolver 127.0.0.11;

  server {
      listen       80;
      server_name  localhost;

      set $template_root /usr/local/openresty/nginx/conf/template;

      location /api/v1 {
        lua_need_request_body on;
        content_by_lua_block {
          local inspect = require "inspect"
          local router = require "router"
          local r = router.new()

          r:match({
            GET = {
              ["/api/v1/status"] = function(params)
                  ngx.say(encodeJSON({
                    status = "OK",
                  }))
              end,
              ["/api/v1/game/:clientId/start"] = function(params)
									local f = io.open("/opt/bingo/database.json", "r")
									ngx.say(f:read("all"))
									f:close()
              end
            },
          })

          local ok, errmsg = r:execute(
            ngx.var.request_method,
            ngx.var.request_uri,
            ngx.req.get_uri_args(),  -- all these parameters
            ngx.req.get_post_args(), -- will be merged in order
            {other_arg = 1})         -- into a single "params" table

          if ok then
            ngx.status = 200
          else
            ngx.status = 404
            ngx.say("Not found!")
          end
        }
      }

      location / {
          root   /usr/local/openresty/nginx/html;
          index  index.html index.htm;
      }

  }

}
